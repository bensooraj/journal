"use strict";(self.webpackChunkjournal=self.webpackChunkjournal||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"BYOT","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/byo-terraform-vultr/introduction","docId":"byo-terraform-vultr/introduction"},{"type":"link","label":"Decoding basic HCL","href":"/docs/byo-terraform-vultr/decoding-basic-hcl","docId":"byo-terraform-vultr/decoding-basic-hcl"},{"type":"link","label":"Labels","href":"/docs/byo-terraform-vultr/labels","docId":"byo-terraform-vultr/labels"},{"type":"link","label":"Evaluation Context and Variables","href":"/docs/byo-terraform-vultr/eval-ctx-and-vars","docId":"byo-terraform-vultr/eval-ctx-and-vars"},{"type":"link","label":"Functions","href":"/docs/byo-terraform-vultr/eval-ctx-and-funcs","docId":"byo-terraform-vultr/eval-ctx-and-funcs"},{"type":"link","label":"Decoding using Body Schema","href":"/docs/byo-terraform-vultr/decoding-using-BodySchema","docId":"byo-terraform-vultr/decoding-using-BodySchema"},{"type":"link","label":"Decoding using Spec","href":"/docs/byo-terraform-vultr/decoding-using-Spec","docId":"byo-terraform-vultr/decoding-using-Spec"},{"type":"link","label":"Final version","href":"/docs/byo-terraform-vultr/final-version","docId":"byo-terraform-vultr/final-version"}],"href":"/docs/category/byot"}]},"docs":{"byo-terraform-vultr/decoding-basic-hcl":{"id":"byo-terraform-vultr/decoding-basic-hcl","title":"Decoding basic HCL","description":"At the very basic level, we can use the Decode method offered by the hcl/v2/hclsimple package,","sidebar":"tutorialSidebar"},"byo-terraform-vultr/decoding-using-BodySchema":{"id":"byo-terraform-vultr/decoding-using-BodySchema","title":"Decoding using Body Schema","description":"We can also decode HCL using hcl.BodySchema. Following is an excerpt from the package\'s documentation,","sidebar":"tutorialSidebar"},"byo-terraform-vultr/decoding-using-Spec":{"id":"byo-terraform-vultr/decoding-using-Spec","title":"Decoding using Spec","description":"Yet another way to define the structure of an HCL document is using hcldec.Spec,","sidebar":"tutorialSidebar"},"byo-terraform-vultr/eval-ctx-and-funcs":{"id":"byo-terraform-vultr/eval-ctx-and-funcs","title":"Functions","description":"This is a continuation of the previous chapter. Just like Variables, Functions is another field offered by hcl.EvalContext.","sidebar":"tutorialSidebar"},"byo-terraform-vultr/eval-ctx-and-vars":{"id":"byo-terraform-vultr/eval-ctx-and-vars","title":"Evaluation Context and Variables","description":"Evaluation Context","sidebar":"tutorialSidebar"},"byo-terraform-vultr/final-version":{"id":"byo-terraform-vultr/final-version","title":"Final version","description":"The proof-of-concept terraform-like IaC tool for Vultr is now complete. The goal was to understand HCL parsing, partial evaluation, resource creation etc. I do have a basic understanding now. Following is a brief video that showcases just that,","sidebar":"tutorialSidebar"},"byo-terraform-vultr/introduction":{"id":"byo-terraform-vultr/introduction","title":"Introduction","description":"We will use the following HCL configuration file to create and tear-down resources in Vultr,","sidebar":"tutorialSidebar"},"byo-terraform-vultr/labels":{"id":"byo-terraform-vultr/labels","title":"Labels","description":"Let\'s add one more block to our configuration,","sidebar":"tutorialSidebar"}}}')}}]);