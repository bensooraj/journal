"use strict";(self.webpackChunkjournal=self.webpackChunkjournal||[]).push([[863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>p});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),h=s(n),d=o,p=h["".concat(l,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(p,c(c({ref:t},m),{},{components:n})):r.createElement(p,c({ref:t},m))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},70:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:6},c="Decoding using Body Schema",i={unversionedId:"byo-terraform-vultr/decoding-using-BodySchema",id:"byo-terraform-vultr/decoding-using-BodySchema",title:"Decoding using Body Schema",description:"We can also decode HCL using hcl.BodySchema. Following is an excerpt from the package's documentation,",source:"@site/docs/2-byo-terraform-vultr/6-decoding-using-BodySchema.md",sourceDirName:"2-byo-terraform-vultr",slug:"/byo-terraform-vultr/decoding-using-BodySchema",permalink:"/docs/byo-terraform-vultr/decoding-using-BodySchema",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/docs/byo-terraform-vultr/eval-ctx-and-funcs"},next:{title:"Decoding using Spec",permalink:"/docs/byo-terraform-vultr/decoding-using-Spec"}},l={},s=[{value:"Pull request/Commits",id:"pull-requestcommits",level:2}],m={toc:s},h="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"decoding-using-body-schema"},"Decoding using Body Schema"),(0,o.kt)("p",null,"We can also decode HCL using ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/hashicorp/hcl/v2#BodySchema"},(0,o.kt)("inlineCode",{parentName:"a"},"hcl.BodySchema")),". Following is an excerpt from the package's documentation,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="github.com/hashicorp/hcl/blob/main/schema.go"',title:'"github.com/hashicorp/hcl/blob/main/schema.go"'},"// BodySchema represents the desired shallow structure of a body.\ntype BodySchema struct {\n    Attributes []AttributeSchema\n    Blocks     []BlockHeaderSchema\n}\n\n// AttributeSchema represents the requirements for an attribute, and is used for matching attributes within bodies.\ntype AttributeSchema struct {\n    Name     string\n    Required bool\n}\n\n// BlockHeaderSchema represents the shape of a block header, and is used for matching blocks within bodies.\ntype BlockHeaderSchema struct {\n    Type       string\n    LabelNames []string\n}\n")),(0,o.kt)("p",null,"The parsing relies on predefined schemas (",(0,o.kt)("inlineCode",{parentName:"p"},"GriffonBlockSchema"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"SSHKeyBlockSchema"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigSchema"),") that describe the expected structure of HCL blocks,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="config_body_schema.go"',title:'"config_body_schema.go"'},'var GriffonBlockSchema = &hcl.BodySchema{\n    Blocks: []hcl.BlockHeaderSchema{},\n    Attributes: []hcl.AttributeSchema{\n        {Name: "region", Required: true},\n        {Name: "vultr_api_key", Required: true},\n    },\n}\n\nvar SSHKeyBlockSchema = &hcl.BodySchema{\n    Blocks: []hcl.BlockHeaderSchema{},\n    Attributes: []hcl.AttributeSchema{\n        {Name: "ssh_key", Required: true},\n    },\n}\n\nvar ConfigSchema = &hcl.BodySchema{\n    Blocks: []hcl.BlockHeaderSchema{\n        {Type: "griffon", LabelNames: []string{}},\n        {Type: "ssh_key", LabelNames: []string{"name"}},\n    },\n    Attributes: []hcl.AttributeSchema{},\n}\n')),(0,o.kt)("p",null,"The actual parsing is done using the ",(0,o.kt)("inlineCode",{parentName:"p"},"hclsyntax.ParseConfig(...)")," method which converts the raw HCL byte content into a structured format ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," (",(0,o.kt)("inlineCode",{parentName:"p"},"*hcl.File"),")."),(0,o.kt)("p",null,"After that, content (",(0,o.kt)("inlineCode",{parentName:"p"},"*hcl.BodyContent"),") is extracted from ",(0,o.kt)("inlineCode",{parentName:"p"},"(hcl.File).Body")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"(hcl.Body).Content(...)")," method based on the overall HCL document's schema (",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigSchema"),"). This process gives us blocks (",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/hashicorp/hcl/v2#Block"},(0,o.kt)("inlineCode",{parentName:"a"},"hcl.Block")),") and attributes (",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/hashicorp/hcl/v2#Attribute"},(0,o.kt)("inlineCode",{parentName:"a"},"hcl.Attribute")),") which can be further iterated over as shown below,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="parser_body_schema.go"',title:'"parser_body_schema.go"'},'func ParseHCLUsingBodySchema(filename string, src []byte, ctx *hcl.EvalContext) (*Config, error) {\n    config := Config{}\n\n    file, diags := hclsyntax.ParseConfig(src, filename, hcl.Pos{Line: 1, Column: 1})\n    // handle error\n\n    bodyContent, diags := file.Body.Content(ConfigSchema)\n    // handle error\n    // ...\n    blocks := bodyContent.Blocks.ByType()\n    for blockName, hclBlocks := range blocks {\n        switch blockName {\n        case "griffon":\n            // call block\'s specific parser based on the block\'s schema `GriffonBlockSchema`,\n            // as shown in the next case ...\n        case "ssh_key":\n            for _, hclBlock := range hclBlocks {\n                var sshKey SSHKeyBlock\n                if err := sshKey.FromHCLBlock(hclBlock, ctx); err != nil {\n                    return nil, err\n                }\n                config.SSHKeys = append(config.SSHKeys, sshKey)\n            }\n        }\n    }\n\n    return &config, nil\n}\n')),(0,o.kt)("p",null,"And each block is further processed to extract its labels and attributes,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="parser_body_schema.go"',title:'"parser_body_schema.go"'},'func (s *SSHKeyBlock) FromHCLBlock(block *hcl.Block, ctx *hcl.EvalContext) error {\n    content, diags := block.Body.Content(SSHKeyBlockSchema)\n    // handle error\n    s.Name = block.Labels[0] // extract labels\n\n    for attrName, attr := range content.Attributes {\n        value, diags := attr.Expr.Value(ctx)\n        // ...\n        switch attrName {\n        case "ssh_key":\n            s.SSHKey = value.AsString() // parse each attribute\n        // ...\n        }\n    }\n    return nil\n}\n')),(0,o.kt)("p",null,"If you noticed, the onus is on us (",(0,o.kt)("em",{parentName:"p"},"nice word play"),") to extract these blocks, labels and attributes and load them into the structs ",(0,o.kt)("inlineCode",{parentName:"p"},"Config{}"),"."),(0,o.kt)("h2",{id:"pull-requestcommits"},"Pull request/Commits"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/bensooraj/griffon/pull/5/files"},"PR | Parse HCL from ",(0,o.kt)("inlineCode",{parentName:"a"},"hcl.BodySchema")))))}u.isMDXComponent=!0}}]);