"use strict";(self.webpackChunkjournal=self.webpackChunkjournal||[]).push([[139],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||c;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<c;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const c={sidebar_position:7},a="Decoding using Spec",i={unversionedId:"byo-terraform-vultr/decoding-using-Spec",id:"byo-terraform-vultr/decoding-using-Spec",title:"Decoding using Spec",description:"Yet another way to define the structure of an HCL document is using hcldec.Spec,",source:"@site/docs/2-byo-terraform-vultr/7-decoding-using-Spec.md",sourceDirName:"2-byo-terraform-vultr",slug:"/byo-terraform-vultr/decoding-using-Spec",permalink:"/docs/byo-terraform-vultr/decoding-using-Spec",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Decoding using Body Schema",permalink:"/docs/byo-terraform-vultr/decoding-using-BodySchema"},next:{title:"Final version",permalink:"/docs/byo-terraform-vultr/final-version"}},p={},l=[{value:"Pull request/Commits",id:"pull-requestcommits",level:2}],s={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"decoding-using-spec"},"Decoding using Spec"),(0,o.kt)("p",null,"Yet another way to define the structure of an HCL document is using ",(0,o.kt)("inlineCode",{parentName:"p"},"hcldec.Spec"),","),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Spec interface {\n    // contains filtered or unexported methods\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"A Spec is a description of how to decode a hcl.Body to a cty.Value."),(0,o.kt)("p",{parentName:"admonition"},'The various other types in this package whose names end in "Spec" are the spec implementations. The most common top-level spec is ObjectSpec, which decodes body content into a cty.Value of an object type. (',(0,o.kt)("em",{parentName:"p"},"source"),": ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/hashicorp/hcl/v2/hcldec#Spec"},(0,o.kt)("em",{parentName:"a"},"pkg doc")),")")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"hcldec")," package has many structs suffixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"Spec")," that satisfy the ",(0,o.kt)("inlineCode",{parentName:"p"},"Spec")," interface, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectSpec"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"BlockSpec"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"AttrSpec"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"BlockListSpec")," etc. These can be used to define the specification of our HCL document,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="config_spec.go"',title:'"config_spec.go"'},'// ConfigSpec is top-level object spec for the config file\nvar ConfigSpec hcldec.ObjectSpec = hcldec.ObjectSpec{\n    "griffon": &GriffonSpec,\n    "ssh_key": &SSHKeySpec,\n}\n\n// GriffonSpec is the spec for the griffon block\nvar GriffonSpec hcldec.BlockSpec = hcldec.BlockSpec{\n    TypeName: "griffon",\n    Nested: &hcldec.ObjectSpec{\n        "region": &hcldec.AttrSpec{\n            Name:     "region",\n            Type:     cty.String,\n            Required: true,\n        },\n        "vultr_api_key": &hcldec.AttrSpec{\n            Name:     "vultr_api_key",\n            Type:     cty.String,\n            Required: true,\n        },\n    },\n}\n\n// SSHKeySpec is the spec for the ssh_key block\nvar SSHKeySpec hcldec.BlockListSpec = hcldec.BlockListSpec{\n    TypeName: "ssh_key",\n    Nested: &hcldec.ObjectSpec{\n        "name": &hcldec.BlockLabelSpec{\n            Index: 0,\n            Name:  "name",\n        },\n        "ssh_key": &hcldec.AttrSpec{\n            Name:     "ssh_key",\n            Type:     cty.String,\n            Required: true,\n        },\n    },\n}\n')),(0,o.kt)("p",null,"And parse the HCL using ",(0,o.kt)("inlineCode",{parentName:"p"},"hcldec.Decode")," which returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"cty.Value"),". Then, we rely on the helper methods provided by the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/zclconf/go-cty/cty#Value"},(0,o.kt)("inlineCode",{parentName:"a"},"cty"))," package to iterate through each block, extract the value of each attribute and load them as string into the destination struct ",(0,o.kt)("inlineCode",{parentName:"p"},"Config"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="parser_spec.go"',title:'"parser_spec.go"'},'func ParseHCLUsingSpec(filename string, src []byte, ctx *hcl.EvalContext) (*Config, error) {\n    var config Config\n    // ...\n    val, diags := hcldec.Decode(file.Body, ConfigSpec, ctx) // val is of type cty.Value\n    // ...\n    for vName, v := range val.AsValueMap() {\n        switch vName {\n        case "griffon":\n            config.Griffon = GriffonBlock{\n                Region:      v.GetAttr("region").AsString(),\n                VultrAPIKey: v.GetAttr("vultr_api_key").AsString(),\n            }\n        case "ssh_key":\n            sshKeys := v.AsValueSlice()\n            // ...\n        }\n    }\n    return &config, nil\n}\n')),(0,o.kt)("h2",{id:"pull-requestcommits"},"Pull request/Commits"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/bensooraj/griffon/pull/6/files"},"PR | Parse HCL from ",(0,o.kt)("inlineCode",{parentName:"a"},"hcldec.Spec")))))}d.isMDXComponent=!0}}]);